.section ".header"
.globl _start
_start:
    rjmp _entry

.text
.globl _entry
_entry:
    # Wipe BSS.

    lda.w r0, __bss_start
    lda.w r1, __bss_end
    cp    r0, r1
    brhs    udata_clear_loop_end
    mov     r2, 0
    mov     r3, 0
udata_clear_loop:
    st.w    r0++, r2
    cp      r0, r1
    brlo    udata_clear_loop
udata_clear_loop_end:

#if defined WITH_STDIO
    # Initialise stdio.

    call __stdio_init_vars
#endif

    # Fetch argc and argv from the stack and set up the environment
    # pointer.

    # l32i a2, sp, 0 # argc
    # l32i a3, sp, 4 # argv
    # l32i a4, sp, 8 # envp
    
    # Store envp.

    # movi a5, environ
    # s32i a4, a5, 0

    # Call main, returning directly to exit.

    lda.w lr, exit
    lda.w pc, main
    
.globl environ
.comm environ, 4

.text
#
#	No stub handler is needed or used on ESP8266
#
.global __sighandler
__sighandler:
    # break 0, 0

# vim: sw=4 ts=4 et

